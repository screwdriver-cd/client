package v3

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/swag"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewGetV3JobsParams creates a new GetV3JobsParams object
// with the default values initialized.
func NewGetV3JobsParams() *GetV3JobsParams {
	var (
		countDefault int64 = int64(50)
		pageDefault  int64 = int64(1)
	)
	return &GetV3JobsParams{
		Count: &countDefault,
		Page:  &pageDefault,
	}
}

/*GetV3JobsParams contains all the parameters to send to the API endpoint
for the get v3 jobs operation typically these are written to a http.Request
*/
type GetV3JobsParams struct {

	/*Count
	  Count to paginate

	*/
	Count *int64
	/*Page
	  Page to paginate

	*/
	Page *int64
}

// WithCount adds the count to the get v3 jobs params
func (o *GetV3JobsParams) WithCount(count *int64) *GetV3JobsParams {
	o.Count = count
	return o
}

// WithPage adds the page to the get v3 jobs params
func (o *GetV3JobsParams) WithPage(page *int64) *GetV3JobsParams {
	o.Page = page
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetV3JobsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
