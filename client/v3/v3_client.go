package v3

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new v3 API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
GetV3Builds gets builds with pagination

Returns all build records
*/
func (a *Client) GetV3Builds(params *GetV3BuildsParams) (*GetV3BuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3BuildsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3Builds",
		Method:             "GET",
		PathPattern:        "/v3/builds",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3BuildsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV3BuildsOK), nil
}

/*
GetV3BuildsID gets a single build

Returns a build record
*/
func (a *Client) GetV3BuildsID(params *GetV3BuildsIDParams) (*GetV3BuildsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3BuildsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3BuildsId",
		Method:             "GET",
		PathPattern:        "/v3/builds/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3BuildsIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV3BuildsIDOK), nil
}

/*
GetV3BuildsIDLogs gets logs for a build

Streams logs
*/
func (a *Client) GetV3BuildsIDLogs(params *GetV3BuildsIDLogsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3BuildsIDLogsParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3BuildsIdLogs",
		Method:             "GET",
		PathPattern:        "/v3/builds/{id}/logs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3BuildsIDLogsReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetV3Jobs gets jobs with pagination

Returns all jobs records
*/
func (a *Client) GetV3Jobs(params *GetV3JobsParams) (*GetV3JobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3JobsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3Jobs",
		Method:             "GET",
		PathPattern:        "/v3/jobs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3JobsReader{formats: a.formats},
	})
  if err != nil {
		return nil, err
	}
	return result.(*GetV3JobsOK), nil
}

/*
GetV3JobsID gets a single job

Returns a job record
*/
func (a *Client) GetV3JobsID(params *GetV3JobsIDParams) (*GetV3JobsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3JobsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3JobsId",
		Method:             "GET",
		PathPattern:        "/v3/jobs/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3JobsIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV3JobsIDOK), nil
}

/*
GetV3Login logins route

Authenticate user with github oauth provider
*/
func (a *Client) GetV3Login(params *GetV3LoginParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3LoginParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3Login",
		Method:             "GET",
		PathPattern:        "/v3/login",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3LoginReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetV3Pipelines gets pipelines with pagination

Returns all pipeline records
*/
func (a *Client) GetV3Pipelines(params *GetV3PipelinesParams) (*GetV3PipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3PipelinesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3Pipelines",
		Method:             "GET",
		PathPattern:        "/v3/pipelines",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3PipelinesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV3PipelinesOK), nil
}

/*
GetV3PipelinesID gets a single pipeline

Returns a pipeline record
*/
func (a *Client) GetV3PipelinesID(params *GetV3PipelinesIDParams) (*GetV3PipelinesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3PipelinesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3PipelinesId",
		Method:             "GET",
		PathPattern:        "/v3/pipelines/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3PipelinesIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV3PipelinesIDOK), nil
}

/*
GetV3Status APIs status

Should respond with 200: ok
*/
func (a *Client) GetV3Status(params *GetV3StatusParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV3StatusParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "getV3Status",
		Method:             "GET",
		PathPattern:        "/v3/status",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV3StatusReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PostV3Builds saves a build

Save a specific build
*/
func (a *Client) PostV3Builds(params *PostV3BuildsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV3BuildsParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "postV3Builds",
		Method:             "POST",
		PathPattern:        "/v3/builds",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV3BuildsReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PostV3Login logins route

Authenticate user with github oauth provider
*/
func (a *Client) PostV3Login(params *PostV3LoginParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV3LoginParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "postV3Login",
		Method:             "POST",
		PathPattern:        "/v3/login",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV3LoginReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PostV3Logout logouts route

Clears the cookie used for authentication
*/
func (a *Client) PostV3Logout(params *PostV3LogoutParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV3LogoutParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "postV3Logout",
		Method:             "POST",
		PathPattern:        "/v3/logout",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV3LogoutReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PostV3Pipelines creates a new pipeline

Create a specific pipeline
*/
func (a *Client) PostV3Pipelines(params *PostV3PipelinesParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV3PipelinesParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "postV3Pipelines",
		Method:             "POST",
		PathPattern:        "/v3/pipelines",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV3PipelinesReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PostV3Validator validates a given screwdriver yaml

Returns the parsed config or validation errors
*/
func (a *Client) PostV3Validator(params *PostV3ValidatorParams) (*PostV3ValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV3ValidatorParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postV3Validator",
		Method:             "POST",
		PathPattern:        "/v3/validator",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV3ValidatorReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV3ValidatorOK), nil
}

/*
PostV3WebhooksBuild handles events from launcher

Updates the status of the build
*/
func (a *Client) PostV3WebhooksBuild(params *PostV3WebhooksBuildParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV3WebhooksBuildParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "postV3WebhooksBuild",
		Method:             "POST",
		PathPattern:        "/v3/webhooks/build",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV3WebhooksBuildReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PostV3WebhooksGithub handles events from git hub

Acts on pull request, pushes, comments, etc.
*/
func (a *Client) PostV3WebhooksGithub(params *PostV3WebhooksGithubParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV3WebhooksGithubParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "postV3WebhooksGithub",
		Method:             "POST",
		PathPattern:        "/v3/webhooks/github",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV3WebhooksGithubReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PutV3BuildsID saves a build

Save a specific build
*/
func (a *Client) PutV3BuildsID(params *PutV3BuildsIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV3BuildsIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "putV3BuildsId",
		Method:             "PUT",
		PathPattern:        "/v3/builds/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV3BuildsIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PutV3JobsID updates a job

Update a specific job
*/
func (a *Client) PutV3JobsID(params *PutV3JobsIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV3JobsIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "putV3JobsId",
		Method:             "PUT",
		PathPattern:        "/v3/jobs/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV3JobsIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
PutV3PipelinesID saves a pipeline

Save a specific pipeline
*/
func (a *Client) PutV3PipelinesID(params *PutV3PipelinesIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV3PipelinesIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "putV3PipelinesId",
		Method:             "PUT",
		PathPattern:        "/v3/pipelines/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV3PipelinesIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
