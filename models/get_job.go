package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/swag"
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*GetJob get job

swagger:model Get Job
*/
type GetJob struct {

	/* Description of the Job

	Maximum: 100
	*/
	Description *string `json:"description,omitempty"`

	/* Identifier of this Job

	Required: true
	*/
	ID string `json:"id"`

	/* Name of the Job

	Required: true
	Maximum: 25
	*/
	Name string `json:"name"`

	/* Identifier of the Pipeline

	Required: true
	*/
	PipelineID string `json:"pipelineId"`

	/* Current state of the Job

	Required: true
	*/
	State string `json:"state"`
}

// Validate validates this get job
func (m *GetJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePipelineID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetJob) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Maximum("description", "body", float64(len(*m.Description)), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GetJob) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *GetJob) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Maximum("name", "body", float64(len(m.Name)), 25, false); err != nil {
		return err
	}

	return nil
}

func (m *GetJob) validatePipelineID(formats strfmt.Registry) error {

	if err := validate.RequiredString("pipelineId", "body", string(m.PipelineID)); err != nil {
		return err
	}

	return nil
}

var getJobTypeStatePropEnum []interface{}

func (m *GetJob) validateStateEnum(path, location string, value string) error {
	if getJobTypeStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			getJobTypeStatePropEnum = append(getJobTypeStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, getJobTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetJob) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}
