package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*UpdateBuild update build

swagger:model Update Build
*/
type UpdateBuild struct {

	/* Current status of the build

	Required: true
	*/
	Status string `json:"status"`
}

// Validate validates this update build
func (m *UpdateBuild) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateBuildTypeStatusPropEnum []interface{}

func (m *UpdateBuild) validateStatusEnum(path, location string, value string) error {
	if updateBuildTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["SUCCESS","FAILURE","QUEUED","ABORTED","RUNNING"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			updateBuildTypeStatusPropEnum = append(updateBuildTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, updateBuildTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateBuild) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
