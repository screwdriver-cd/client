package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*UpdateJob update job

swagger:model Update Job
*/
type UpdateJob struct {

	/* Current state of the Job

	Required: true
	*/
	State string `json:"state"`
}

// Validate validates this update job
func (m *UpdateJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateJobTypeStatePropEnum []interface{}

func (m *UpdateJob) validateStateEnum(path, location string, value string) error {
	if updateJobTypeStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			updateJobTypeStatePropEnum = append(updateJobTypeStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, updateJobTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateJob) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}
